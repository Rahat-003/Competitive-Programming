struct node{
    int max_val,min_val;
    node(){};
    node(int a,int b){ max_val = a, min_val = b; }
};

namespace sparse_table{
//  indexing starts from 1 |
    int N,sz;
    struct sample{
        vector<vector<node>> table;
        sample(vector<int> ar){
///         check ar whether int or long long
            N = (int)ar.size();
            sz = log2(N)+3;
            table = vector<vector<node>>(N+3);
            for(int i = 0; i<=N; i++)   table[i] = vector<node>(sz);
            for(ll i = 1; i<=N; i++)    table[i][0] = node(ar[i],ar[i]);
            for(ll i = 1,k = 1; i<log2(N); i++,k*=2){
                for(ll j = 1; j<=N; j++){
                    if(j-k<=0)  continue;
                    table[j][i].max_val = max(table[j][i-1].max_val,table[j-k][i-1].max_val);
                    table[j][i].min_val = min(table[j][i-1].min_val,table[j-k][i-1].min_val);
                }
            }
        }
        node query(int l,int r){
            ll len = log2(r-l+1),k = 1ll<<len;
            node x = table[r][len],y = table[l+k-1][len];
            return node(max(x.max_val,y.max_val),min(x.min_val,y.min_val));
        }
};
}